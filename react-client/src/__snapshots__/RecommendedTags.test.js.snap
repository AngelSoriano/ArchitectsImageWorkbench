exports[`function (props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
      }

      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (initialState === undefined && this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

      this.state = initialState;
    } renders and matches our snapshot 1`] = `
<div>
  <div
    className="tagsBar btn-toolbar"
    role="toolbar">
    <button
      className="btn btn-primary"
      disabled={false}
      type="button">
      tag1
    </button>
    <button
      className="btn btn-success"
      disabled={false}
      type="button">
      tag2
    </button>
    <button
      className="btn btn-info"
      disabled={false}
      type="button">
      tag3
    </button>
    <button
      className="btn btn-warning"
      disabled={false}
      type="button">
      tag4
    </button>
    <button
      className="btn btn-danger"
      disabled={false}
      type="button">
      tag5
    </button>
    <button
      className="btn btn-default"
      disabled={false}
      type="button">
      tag6
    </button>
  </div>
</div>
`;
